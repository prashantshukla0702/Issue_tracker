<div class="my-5 p-5 bg-secondary text-white">
  <div class="view-project-head">
    <h3><%= result.projectdetail.name %></h3>
    <!-- Search Input Field -->
    <input
      type="text"
      id="search"
      onkeyup="searchIssue(this)"
      placeholder="Search Title/Description"
      autocomplete="off"
    />
    <input type="hidden" value="<%= result.projectdetail.id %>" id="pid" />
    <!-- Navigation to Report an issue -->
    <div>
      <a
        href="javascript:void(0);"
        data-bs-toggle="modal"
        data-bs-target="#filterModal"
        class="btn btn-md btn-dark"
        ><i class="fa fa-sliders"></i
      ></a>
      <a
        href="/issue/create/<%= result.projectdetail._id %>"
        class="btn btn-dark"
      >
        Report Issue
      </a>
    </div>
  </div>
  <div
    class="modal fade"
    id="filterModal"
    tabindex="-1"
    aria-labelledby="filterModalLabel"
    aria-hidden="true"
  >
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title text-dark" id="filterModalLabel">
            Filter Issues
          </h5>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="modal"
            aria-label="Close"
          ></button>
        </div>
        <div class="modal-body text-dark">
          <div class="row">
            <!-- Labels column for filter -->
            <div class="col-md-6">
              <div class="form-group">
                <label for="filterbylabel" class="form-label">Labels</label>
                <% result.projectLabels.forEach((label)=>{ %>
                <div class="form-check">
                  <input
                    class="form-check-input"
                    type="checkbox"
                    value="<%= label %>"
                    name="labels"
                    id="labelCheckbox"
                  />
                  <label class="form-check-label" for="labelCheckbox">
                    <%= label %>
                  </label>
                </div>
                <% }); %>
              </div>
            </div>
            <!-- Authors column for filter -->
            <div class="col-md-6">
              <div class="form-group">
                <label for="filterbylabel" class="form-label">Authors</label>
                <% result.authorNames.forEach((author,index)=>{ %>
                <div class="form-check">
                  <input
                    class="form-check-input"
                    type="radio"
                    value="<%= author %>"
                    name="author"
                    id="author<%= index+1 %>"
                  />
                  <label class="form-check-label" for="author<%= index+1 %>">
                    <%= author %>
                  </label>
                </div>
                <% }); %>
              </div>
            </div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" id="removefilter">
            Remove All
          </button>
          <button type="button" class="btn btn-primary" id="filterForm">
            Apply
          </button>
        </div>
      </div>
    </div>
  </div>
  <div class="table-responsive">
    <table class="table table-striped table-dark my-5">
      <thead>
        <!-- Table Heading for each column -->
        <tr>
          <th scope="col">#</th>
          <th scope="col">Title</th>
          <th scope="col">Author</th>
          <th scope="col">Description</th>
          <th scope="col">Labels</th>
        </tr>
      </thead>
      <tbody id="bug-list">
        <!-- To display the list of the bugs -->
        <% if(result.issue.length > 0) {
        result.issue.forEach((issueDetail,index)=> { %>
        <tr>
          <th scope="row"><%= index+1 %></th>
          <td><%= issueDetail.title %></td>
          <td><%= issueDetail.author %></td>
          <td><%= issueDetail.description %></td>
          <td><%= issueDetail.labels %></td>
        </tr>
        <% }); }else{ %>
        <tr>
          <td colspan="5">
            <p class="text-center">No Issues Found</p>
          </td>
        </tr>
        <% } %>
      </tbody>
    </table>
  </div>
</div>

<script>
  // Funtion to search the issue by title
  function searchIssue(e) {
    const searchInput = $("#search");
    const query = searchInput.val().trim(); // Get the user's input and trim any leading/trailing spaces
    const pid = $("#pid").val();
    const listContainer = $("#bug-list"); // table body to store the bug list results
    const match = query.match(/\s*/);
    // if (match[0] === query) {
    //   // check if user inserted only spaces
    //   return;
    // }
    fetch("/project/getissue/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ query: query, pid }),
    })
      .then((data) => {
        return data.json(); // converting the fetch response into json
      })
      .then((result) => {
        // let bugArray = result.data;
        if (result.length > 0) {
          listContainer.html("");
          result.forEach((element, index) => {
            // loop over the search result and append the row in table body
            listContainer.append(`
            <tr>
              <th scope="row">${index + 1}</th>
              <td> ${element.title} </td>
              <td> ${element.author} </td>
              <td> ${element.description} </td>
              <td> ${element.labels} </td>
            </tr>`);
          });
        } else {
          listContainer.html(`
            <tr>
              <td colspan="5" class="text-center"> No Issues Found </td>
            </tr>`);
        }
      });
  }
  // Funtion to fiter the Issues by label and author
  const filterForm = document.getElementById("filterForm");
  filterForm.addEventListener("click", async (event) => {
    event.preventDefault();

    // Convert Nodelist into an array and store the value of checked labels in a variable
    const selectedLabels = Array.from(
      document.querySelectorAll('input[name="labels"]:checked')
    ).map((checkbox) => checkbox.value);

    // Get selected author
    const selectedAuthor = document.querySelector(
      'input[name="author"]:checked'
    );
    // Extract author value if selected
    const author = selectedAuthor ? selectedAuthor.value : "";

    // Send a request to filter data based on selected labels and author
    try {
      const pid = $("#pid").val();

      await fetch("/project/filterissue/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ labels: selectedLabels, author, pid }),
      })
        .then((response) => {
          return response.json();
        })
        .then((filterData) => {
          const listContainer = $("#bug-list");
          // const filterData = data.filteredBugs;
          if (filterData.length > 0) {
            listContainer.html("");
            filterData.forEach((element, index) => {
              listContainer.append(`
            <tr>
              <th scope="row">${index + 1}</th>
              <td> ${element.title} </td>
              <td> ${element.author} </td>
              <td> ${element.description} </td>
              <td> ${element.labels} </td>
            </tr>`);
            });
            $("#filterModal").modal("hide");
          } else {
            listContainer.html(`
            <tr>
              <td colspan="5"> No Issues Found </td>
            </tr>`);
            $("#filterModal").modal("hide");
          }
        });
    } catch (error) {
      console.error(error);
    }
  });

  // Funtion to remove all the filters
  const removeBtn = document.getElementById("removefilter");
  removeBtn.addEventListener("click", async (event) => {
    event.preventDefault();
    try {
      const pid = $("#pid").val();

      await fetch("/project/filterissue/", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ labels: "", author: "", pid }),
      })
        .then((response) => {
          return response.json();
        })
        .then((filterData) => {
          const listContainer = $("#bug-list");
          // const filterData = data.filteredBugs;
          if (filterData.length > 0) {
            listContainer.html("");
            filterData.forEach((element, index) => {
              listContainer.append(`
            <tr>
              <th scope="row">${index + 1}</th>
              <td> ${element.title} </td>
              <td> ${element.author} </td>
              <td> ${element.description} </td>
              <td> ${element.labels} </td>
            </tr>`);
            });
            $('input[type="radio"]:checked').prop("checked", false); // remove all checked from radio button
            $('input[type="checkbox"]:checked').prop("checked", false); // remove all checked from checkbox button
            $("#filterModal").modal("hide"); // Hide the model
          } else {
            listContainer.html(`
            <tr>
              <td colspan="5"> No Issues Found </td>
            </tr>`);
            $('input[type="radio"]:checked').prop("checked", false);
            $('input[type="checkbox"]:checked').prop("checked", false);
            $("#filterModal").modal("hide");
          }
        });
    } catch (error) {
      console.error(error);
    }
  });
</script>
